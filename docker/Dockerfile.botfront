ARG UBUNTU_VERSION=18.04

ARG CUDA=10.1
FROM nvidia/cuda:10.1-base-ubuntu18.04 as base
# ARCH and CUDA are specified again because the FROM directive resets ARGs
# (but their default value is retained if set previously)
ARG CUDA_DASH=10-1
ARG CUDNN=7.6.4.38-1
ARG CUDNN_MAJOR_VERSION=7
ARG LIB_DIR_PREFIX=x86_64
ARG LIBNVINFER=6.0.1-1
ARG LIBNVINFER_MAJOR_VERSION=6

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        cuda-command-line-tools-${CUDA_DASH} \
        # There appears to be a regression in libcublas10=10.2.2.89-1 which
        # prevents cublas from initializing in TF. See
        # https://github.com/tensorflow/tensorflow/issues/9489#issuecomment-562394257
        libcublas10=10.2.1.243-1 \ 
        cuda-nvrtc-${CUDA_DASH} \
        cuda-cufft-${CUDA_DASH} \
        cuda-curand-${CUDA_DASH} \
        cuda-cusolver-${CUDA_DASH} \
        cuda-cusparse-${CUDA_DASH} \
        curl \
        libcudnn8 \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libzmq3-dev \
        pkg-config \
        software-properties-common \
        unzip

COPY ./docker/cuda/libcudnn7_7.6.5.32-1+cuda10.1_amd64.deb /tmp/
RUN dpkg -i /tmp/libcudnn7_7.6.5.32-1+cuda10.1_amd64.deb

# For CUDA profiling, TensorFlow requires CUPTI.
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# Link the libcuda stub to the location where tensorflow is searching for it and reconfigure
# dynamic linker run-time bindings
RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \
    && echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/z-cuda-stubs.conf \
    && ldconfig

RUN add-apt-repository ppa:deadsnakes/ppa && apt install -y \
    python3.8 \
    python3.8-dev \
    python3.8-venv

RUN apt-get update -qq \
 && apt-get install -y --no-install-recommends \
    # required by psycopg2 at build and runtime
    libpq-dev \
     # required for health check
    curl

FROM base as builder

RUN apt-get update -qq && \
  apt-get install -y --no-install-recommends \
  build-essential \
  wget \
  openssh-client \
  graphviz-dev \
  pkg-config \
  git-core \
  openssl \
  libssl-dev \
  libffi-dev \
  libpng-dev

# install poetry
# keep this in sync with the version in pyproject.toml and Dockerfile
ENV POETRY_VERSION 1.1.15
RUN curl -sSL https://install.python-poetry.org | python3.8
ENV PATH "/root/.local/bin:/opt/venv/bin:${PATH}"

# change working directory
WORKDIR /build
# copy files
COPY pyproject.toml poetry.lock ./
COPY rasa_addons/ ./rasa_addons/

# install dependencies
RUN --mount=type=cache,target=/root/.cache python3.8 -m venv /opt/venv && \
  . /opt/venv/bin/activate && \
  pip install --no-cache-dir -U pip && \
  poetry install --extras full --no-dev --no-root --no-interaction

RUN pip install wheel && \
  cd rasa_addons && \
  mkdir rasa_addons && \
  mv `\ls -1 . | grep -v -e setup.py -e rasa_addons` ./rasa_addons/ && \
  python setup.py install && \
  cd ..

COPY rasa/ ./rasa/
COPY README.md ./

RUN poetry build -f wheel -n && \
  pip install --no-deps dist/*.whl && \
  rm -rf dist *.egg-info

# start a new build stage
FROM base as runner

# copy everything from /opt
COPY --from=builder /opt/venv /opt/venv

# make sure we use the virtualenv
ENV PATH="/opt/venv/bin:$PATH"

# update permissions & change user to not run as root
WORKDIR /app
RUN chgrp -R 0 /app && chmod -R g=u /app
USER 1001

RUN rasa telemetry disable

# create a volume for temporary data
VOLUME /tmp

# Create a volume for models
VOLUME /app/models

# change shell
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# the entry point
EXPOSE 5005

CMD rasa run \
  $([ -n "$MODEL_PATH" ] && echo "-m $MODEL_PATH") \
  $([ -n "$AUTH_TOKEN" ] && echo "--auth-token $AUTH_TOKEN" ) \
  --enable-api --debug
